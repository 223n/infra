require 'rake'
require 'rspec/core/rake_task'
require 'yaml'

class AnsibleHelper

  def initialize(playbook)
    @playbook = playbook
    @inventory = YAML.load(`ansible-inventory --list`)
    load_vars
  end

  attr_reader :playbook

  def get_host_list
    return @inventory['_meta']['hostvars'].keys
  end

  def get_role_paths
    unless @role_paths
      result = `ansible-config dump | grep DEFAULT_ROLES_PATH`.strip
      @role_paths = result.split(' = ')[1][1..-2].split(', ').map{ |item| item[2..-2] }
      @role_paths << './roles'
    end
    return @role_paths
  end

  def load_vars(target='all')
    out = `ansible -m debug -a 'var=vars' #{target}`
    tmp_hash = Hash[*out.split(/([^\s]+) \| SUCCESS => /).drop(1)]
    @host_vars = tmp_hash.map{ |key, val| [key, YAML.load(val)['vars']]}.to_h
  end

  def get_play_roles(host)
    unless @host_vars.key?(host)
      load_vars host
      return false unless @host_vars[host]
    end

    playbook_hosts_values = @host_vars[host]['group_names']
    playbook_hosts_values.unshift('all')
    playbook_hosts_values << host

    playbook = YAML.load_file(@playbook)
    play_roles = []
    playbook.each do |play|
      if playbook_hosts_values.include?(play['hosts']) && play.key?('roles')
        play['roles'].each do |role|
          role_name = role
          role_name = role['role'] if role.is_a?(Hash)
          play_roles << role_name
        end
      end
    end
    return play_roles
  end

  def get_find_patterns(paths, rules, suffix='')
    find_patterns = []
    paths.each do |path|
      find_patterns << path + '/{' + rules.join(',') + '}/' + suffix
    end
    return find_patterns
  end

  def recursive_find_roles(roles=[])
    loop do
      find_patterns = get_find_patterns(get_role_paths, roles, 'meta/main.yml')
      meta_files = Dir.glob(find_patterns)
      break if meta_files.empty?
      dependency_roles = []
      meta_files.each do |meta_file|
        role_meta = YAML.load_file(meta_file)
        if role_meta.key?('dependencies') && !role_meta['dependencies'].empty?
          role_meta['dependencies'].each do |role|
            role_name = role
            role_name = role['role'] if role.is_a?(Hash)
            dependency_roles << role_name
          end
        end
      end
      dependency_roles = dependency_roles - roles
      dependency_roles.uniq!
      roles.concat(dependency_roles)
      break if dependency_roles.empty?
      recursive_find_roles dependency_roles
    end
    return roles
  end

  def get_play_all_roles(host)
    play_all_roles = play_roles = get_play_roles host
    play_all_roles = recursive_find_roles play_roles unless play_roles.empty?
    return play_all_roles
  end
end

playbook = ENV['ANSIBLE_PLAYBOOK'] || 'playbook.yml'
helper = AnsibleHelper.new(playbook)

task :spec    => 'spec:all'
task :default => :spec

namespace :spec do

  hosts = helper.get_host_list

  task :all     => hosts
  task :default => :all

  hosts.each do |host|
    desc "Run serverspec tests to #{host}"
    RSpec::Core::RakeTask.new(host.to_sym) do |t|
      ENV['TARGET_HOST'] = host
      role_paths = helper.get_role_paths
      play_roles = helper.get_play_all_roles host
      ENV['ROLE_PATHS'] = role_paths.join(',')
      ENV['ROLE_NAMES'] = play_roles.join(',')

      spec_patters = []
      role_paths.each do |role_path|
        spec_patters << role_path + '/{' + play_roles.join(',') + '}/spec/*_spec.rb'
      end
      spec_patters << "./spec/#{host}/*_spec.rb"
      t.pattern = spec_patters
    end
  end
end
